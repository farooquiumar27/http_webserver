#include<iostream>
#include<map>
#include<unordered_map>
#include<utility>
using namespace std;
namespace ufwp
{

class URLEncoder
{
public:
static void decode(int dataCount,char ** &data);
static void encode(int dataCount,char ** &data);
};

class Response
{
private:
string FILE_NAME;
int clientSocketDescriptor;
public:
Response(int);
void write(const char *);
void write(const char *,int);
void sendResponse(const char *mimeType);
void clear( );
void close( );
int size( );
};


class Request
{
private:
typedef struct _request
{
char *method;
char *resource;
char isClientSideTechnologyResource;
char *mimeType;
int dataCount;
char **data;
}REQUEST;
REQUEST *request;
int sct;
Response *response;  //for forwarding the request we need it.
map<string,void(*)(Request &,Response &)> serverSideTechnologyRequestMap_2;  //for cheching the server resourse in case of request forwarding
unordered_map<string, int> intMap;  //for app_dev to insert info before forwarding and then sending to another function
int extensionEquals(const char *left,const char *right);
void findAndReplace(const char *resource);
void undoReplacement(const char *resource);
char* getMimeType(char *resource);
char isClientResource(char *resource);
REQUEST * parseRequest(char *bytes);
public:
Request(char *bytes);
~Request( );
void setResponse(Response *response);
string get(const char *);
void clear( );
const char* giveResource( );
char giveTechnologySide( );
const char* giveMime( );
void fillMap(string,void(*)(Request &,Response &));
void forward(const char *resourse);
void setInt(const char *,int);
int getInt(const char *);
};


class UfWebProjector
{
private:
int portNumber;
map<string,void(*)(Request &,Response &)> serverSideTechnologyRequestMap;
//char *url;
//void(*ptrOnRequest)(Request &,Response &);
public:
UfWebProjector(int portNumber);
~UfWebProjector( );
void onRequest(const char *,void(*)(Request &,Response &));
void start( );
};
}